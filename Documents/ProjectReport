![Logo](logo1.png)

# **Project Report IDATA2304 Autumn 2022**
This is a prototype solution created by four computer science students in the course IDATA2304 Computer Networks.

## **Termonology**
### *Term and Definition* 

1. **TCP** -> *Transmission Control Protocol (TCP) is one of the main [protocols](https://en.wikipedia.org/wiki/Communication_protocol) of the [Internet Protocol suite](https://en.wikipedia.org/wiki/Internet_protocol_suite).* [Wikipedia](https://en.wikipedia.org/wiki/Transmission_Control_Protocol)

2. **Database** -> *In [computing](https://en.wikipedia.org/wiki/Computing), a database is an organized collection of [data](https://en.wikipedia.org/wiki/Data_(computer_science)) stored and accessed electronically*. [Wikipedia](https://no.wikipedia.org/wiki/Database)

3. **Spot Price** -> *A spot price is the price retailers pay when the buy electricity form the wholesale market. Spot prices change every half-hour nd can vary quite dramatically depending on supply and demand. Typically spot prices are higher during winter, and weekdays at breakfast and dinner time*. [Electricity Authority](https://www.ea.govt.nz/consumers/my-electricity-bill/is-a-spot-price-contract-right-for-me/)

4. **Inflation** -> *In [economics](https://en.wikipedia.org/wiki/Economics), **inflation** refers to a general increase in the prices of goods and services in an economy* [Wikipedia](https://en.wikipedia.org/wiki/Inflation)

5. **Interest Rates** -> *An **interest rate** is the amount of [interest](https://en.wikipedia.org/wiki/Interest) due per period, as a proportion of the amount lent, deposited, or borrowed (called the [principal sum](https://en.wikipedia.org/wiki/Debt#Principal))*. [Wikipedia](https://en.wikipedia.org/wiki/Interest_rate)

6. **Sequence Number** ->

7. **ACK** ->

8. **Protocol** ->

9. **HTTP** ->



## **Abstract**
The world is going into a global crisis situation where the energy prices, gas prices, inflation and the interest rates are reaching for the sky. These factors are causing extremely high energy and consume prices, and is making it very difficult for people to pay their electricity bills. 

Because of all the problems this has caused, as well as the media attention, we were encouraged to create something that would make it easier for people to have control of their energy usage, and the cost of this. Therefore, we created a prototype where the user is provided with a full rundown of their electricity consumption. Users can see where they use the most electricity and what the price is on during the day. With this people can reduce their energy consumption and organize it to when it is cheapest during the day. From discussions people has agreed what this prototype solution could have a big impact on their electricity usage and help them become more aware of it. We have tested with real sensors, but our Raspberry Pi short circuited, therefore we continued the process with dummy data.  

Our solution results in better awareness, less and cheaper energy usage. Possible future additions include statistics, sensors stationed in multiple rooms and homes, login and register function and analysis. 


## **Introduction**

Our solution is planned to private homes, companies, but also usable in other aspects where you would want to track you electricity usage. The problem we have encountered in the world is high energy consumption and spot prices, which make for high energy prices that people and companies struggle to pay. Our solution provides an overview of ones electricity consumption, and can help them choose when during the day they can do electricity consuming activities, in order to minimize their electricity bills. This way people can take action on the high prices. 

### **Contents**
* ### [Termonology](#termonology)
* ### [Abstract](#abstract)
* ### [Introduction](#Introduction)
* ### [Theory and Technology](#theory-and-technology)
* ### [Methodology](#methodology)
* ### [Results](#result)
* ### [Discussion](#discussion)
* ### [Conclusion and Future Work](#conclusion-and-future-work)
* ### [References](#referances)


## **Theory and technology**

### *Structure of application*

Our project consists of 5 nodes. By nodes we mean different connection points in our structure where the data is either formatted or transferred further to other nodes. We can divide our application into 2 layers, consisting of backend and frontend. In the front end we have 3 nodes, these are the Database Management Systems (DBMS) server, the web server, and the web browser. The DBMS hosts the database and allows us to store and retrieve data in the database. The Web server is the domain holding all the html pages and the PHP and JS scripts. Finally, the web browser, which displays the website and executes the scripts resolving in SQL requests to the DBMS retrieving data from the database. 

The backend components are the client.java and ClientServer.java. Client.java formats the data received from a generator, which works as a virtual sensor, and sends it to the ClientServer.java. The job of ClientServer.java is to act as a server for the client class and a client for the DBMS server. By this we mean that the server's responsibility is to wait for the client to send data, the client's responsibility is to handle the data, insert it into the SQL insert command and then connect to the DBMS and run the command there. In the picture below is an UML chart and shows how the nodes communicates.

"UML chart."![UML diagram, showing the structure of the application](UML.png)

### *Database*

The application uses a database to store the gathered data, the database is hosted in PHP using a MariaDB server. To send the information from the program to the database, we used Java Database Connectivity (JDBC) to establish a connection to the MariaDB server. By using an INSERT query, the data is organized correctly into the database. The database is the applications memory, it handles all our data and makes it possible to manipulate it in the directions wanted. It is used to print out graphs visualizing the electricity usage.

### *TCP and data transference*

Our program relies on reliable data transfer. In order to transfer the given data from the generator or sensor it is crucial that every detail of the information is transferred. To ensure this, our program takes use of the data transfer protocol called Transmission Control Protocol (TCP) when data is exchanged between Client.java and ServerClient.java. Reliable data transfer between these classes are crucial for the data. The usage of TCP makes the data transfer solid so we can upload the data to our database, knowing it is correct. If we decided that TCP was not necessary and tried using a different transfer protocol like UDP, we could not ensure valid data. This may cause the data displayed on our website to be unreliable or even corrupted. The reasoning of this is that UDP protocol does not include a 3-way handshake like TCP that guarantees reliable data transmission. The application would function with UDP, but it would not ensure that the graphs or data presented on the sites are correct and viable.

### *Generating Data*

Through out the project, data was needed to be able to represent the electricity usage. Here we looked at several options. One being an electricity plug where one could get the electricity used by the device which was plugged in. This would be a good option, but the plugs found already had an app which returned this information. We ended up with generating data. This way we could make data which represent electricity usage from a whole house. 
To get data which we can use to represent the electricity usage, we created a class which returns the generated data. The data which we retrieve from the generator is the current time, date, and electricity usage. The data is based on the electricity usage of an average household, and to make the generated data as realistic a possible, the data returned is based on the current time of the day. We could see from different charts, that from 00:00 to 10:00 the levels stayed almost the same, with little to no change. From 10:00 to 14:00 the levels went noticeably up, and when adding a range, the output data would be realistic. From 14:00 to 18:00 we saw that the numbers stayed almost the same, but the real change came around 18:00 to 00:00. Here the electricity usage spiked, but due to it having variations of usage, a range was added to make it realistic. 

![Electricity usage inn homes](electricityUsage.png)<sub> 1. Researchgate</sub>

## **Methodology**

Our workflow has consisted mainly of working together as a group and assigning tasks for each other that must be completed before next meeting. We did some testing with raspberry PI and temperature sensor, but did not implement this in the application since we focused on energy usage. With a kwh sensor it could implement real life data, but the data is currently generated by code. Spot price is also code generated, and is currently based on an average for postal code 6009 Ålesund. The data is then sent to a client every hour using TCP to provide reliability. The client then connects to the database and inserts it into the database with all the necessary values.  

## **Result**

Our data is transmitted from a simple java backend to a central database. This database is hosted on a server which our website retrieves information from. The data in the database is sent by our java backend. The backend is made up of 3 classes, a generator, which generate data to mimic a sensor, a client, which operates as a bridge for the data to be transferred, a client/server, which have a shared responsibility both as a server receiving the data from the sensor and client and as a client that’s forward the data to the database. The generator has divided responsibility, it does not only generate data representing a sensor which cover the usage of electricity but also it mimics a solution which retrieves live spot prices from 6009 Ålesund from the web, or electricity companies. Client is the class that’s acts as a bridge between the sensors and the rest of the application, it sends the data from the generator to a receiver. The client tries to connect to a serversocket, after the connection is made, the client sends the data, furthermore the client class rather than close the connection it holds the connection open and waits an hour before it transmits a new set of data. The ServerClient is the class that needs to be started first, this is because it is the server in the first data transfer instance. The class opens a socket where the data sender can connect to, after the connection is established, it will wait for incoming packets from the data sender. Connection between the two classes will be terminated automatic after ServerClient has received 100 sets of data, this means it will run continuously in 100 hours before it needs to be restarted. This is an implementation we have set in order to ensure that the application will not run without observation or unsupervised. This cause the application to preserve energy when it is not necessary to run. ServerClient starts by setting up the server socket then it will establish a connection to the database through the database management system. After the acknowledgment from the database management system indicating that data has been added to the database, the ServerClient closes the connection to the database, the termination and establishment of connection to the database is done between every data transfer. Why we do this is with opening and closing the connection, the connection would be more secure. The window for exploiting the connection will be drastically reduced. Data that the ServerClient are receiving are formatted inside static SQL queries which we have learned about in IDATA2302.

## **Discussion**

We wanted to get data from a sensor and tried getting data from a raspberry pi which measures the temperature. With the temperature measurer we were able to make a graph which updates every 0,5 seconds. Sadly, the raspberry pi short circuited, and we figured that it would be better to use generated data. The generated data would be better for what we were trying to make but figured that we could implement the raspberry pi data in the future.     



## **Conclusion and Future Work**

The prototype of the application currently provides us with the ability to see the current spot price and electricity usage, and combines these two to give us the total cost per hour in kroner. In the future we wish to give the user real data which have been taken from a reliable source, along with a way of measuring the electricity usage in different rooms. With the real data it will be easier to calculate the electricity bill for the next month, which can help people manage their economy. To give the application better security, we wish to give the web page an SSL-key to encrypt it. We also hope to give users a login to give them full insight on their data, along with extra security for users. 


## **Referances**

1. [Researchgate](https://www.researchgate.net/figure/Example-of-power-consumption-of-a-household-over-a-24-hour-period-measured-in-kW_fig3_235644349), picture visualizing the the consetp used in generator class. (03.12.2022, Researchgate)