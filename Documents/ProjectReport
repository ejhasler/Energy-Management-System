![Logo](logo1.png)

# **Project Report IDATA2304 Autumn 2022**
This is a prototype solution created by four computer science students in the course IDATA2304 Computer Networks.

## **Termonology**
### *Term and Definition* 

1. **TCP** -> *Transmission Control Protocol (TCP) is one of the main [protocols](https://en.wikipedia.org/wiki/Communication_protocol) of the [Internet Protocol suite](https://en.wikipedia.org/wiki/Internet_protocol_suite).* [Wikipedia](https://en.wikipedia.org/wiki/Transmission_Control_Protocol)

2. **Database** -> *In [computing](https://en.wikipedia.org/wiki/Computing), a database is an organized collection of [data](https://en.wikipedia.org/wiki/Data_(computer_science)) stored and accessed electronically*. [Wikipedia](https://no.wikipedia.org/wiki/Database)

3. **Spot Price** -> *A spot price is the price retailers pay when the buy electricity form the wholesale market. Spot prices change every half-hour nd can vary quite dramatically depending on supply and demand. Typically spot prices are higher during winter, and weekdays at breakfast and dinner time*. [Electricity Authority](https://www.ea.govt.nz/consumers/my-electricity-bill/is-a-spot-price-contract-right-for-me/)

4. **Inflation** -> *In [economics](https://en.wikipedia.org/wiki/Economics), **inflation** refers to a general increase in the prices of goods and services in an economy* [Wikipedia](https://en.wikipedia.org/wiki/Inflation)

5. **Interest Rates** -> *An **interest rate** is the amount of [interest](https://en.wikipedia.org/wiki/Interest) due per period, as a proportion of the amount lent, deposited, or borrowed (called the [principal sum](https://en.wikipedia.org/wiki/Debt#Principal))*. [Wikipedia](https://en.wikipedia.org/wiki/Interest_rate)

6. **Sequence Number**

7. **ACK**

8. **Protocol**

9. **HTTP**



## **Abstract**
We are globally going into a world situation where the energy prices, gas prices, inflation and the interest rates are reaching for the sky. These factors are creating extremely high energy and consume prices, and are making it very diffiult for families and people to be able to pay their electrisity bills. 

Reading all these news almost everyday, we was encouraged to create something for the people that would make it easier for them to have control over their Energy Usage and how much the cost are going to be. So we created a prototype where users can get a full overview of their electricity consumption. Users can see what they use electricity for and can take charge of when it is the cheapest spot price. This gives the ability to reduce your energy consumption and use energy when it is cheapest during the day. We have discussed with some people where they agreed that this prototype solution could have big impact on their energy consumption and that it would help them become more aware of their usage. We have also tested with real sensors, but our Raspberri Pi short circuited, but we continued the process with dummy data.

The results of our solution helps the users become more aware, use less energy, and use energy at the cheapest time during the day. Possible future reasearch directions includes statistics, room sensors, multiple homes, login and register function and analysis.

## **Introduction**

Our solution is based in private homes, companies, and currently landbased. The problem we have encountered in the world market is high energy consumption and spot prices, which create high energy prices that people and companies struggle to pay. Our soluiton helps to create an overview of each individual's electricity consumption, and where they can be combined when it is cheapest during the day to use electricity, so that people minimze the likelihood of high electricity bills. This is relevant so that the people can have an advantage on the prices that we today's market.

### **Contents**
* ### [Termonology](#termonology)
* ### [Abstract](#abstract)
* ### [Introduction](#Introduction)
* ### [Theory and Technology](#theory-and-technology)
* ### [Methodology](#methodology)
* ### [Results](#result)
* ### [Discussion](#discussion)
* ### [Conclusion and Future Work](#conclusion-and-future-work)
* ### [References](#referances)


## **Theory and technology**

### *Structure of application*

Our project consists of 5 nodes. By nodes we mean different connection points in our structure where the data is either formated or tranfered further to other nodes. We can devide our application into 2 layers, constisting of backend and frontend. In the front end we have 3 nodes, these are the dbms server, which host the database and allows us to store data and retrieve the data inside the database, the web server, which is the domain holding the different html pages and the php and js scripts, and the web browser, which displays the website and execute the scripts resolving in SQL requests to the dbms retrieving data from the database. 

The backend components are the client.java and ClientServer.java. Client.java are formatting the data recieved from a generator which works as an virtuel sensor, and sending it to the ClientServer.java. The job of ClientServer.java is to act as a server for the client class and a client for the dbms server. By this we mean that the server's responsebility is to wait for the client to send data, the client's responsebility is to handle the data, format it into a sql insert query and then connect to the dbms and run the sql query. Under is a UML chart og how the nodes communicates.
"This is the structure of our ducking report shit stuff."![UML diagram, showing the structure of the application](uml_bby.png)

### *Database*

The application uses a database to store the gathered data, the database is hosted in PHP using a MariaDB server. To send the information from the program to the database, we used Java Database Connectivity (JDBC) to establish a connection to the MariaDB server. By using an INSERT query, the data is organized correctly into the database. The database is the applications memory, it handles all our data and makes it possible to manipulate it in the directions wanted. It is used to print out graphs visualizing the electricity usage.

### *TCP and datatransfere*

Our program relies on reliable data transfer. In order to transfer the given data from the generator or sensor it is crucial that every detail of the information is transferred. To ensure this we use the data transfer protocol TCP in our backend between the two classes which is crucial for the data. The usage of TCP makes the data transfer solid so we can upload the data to our database, which then can be printed out on the website. If we decided that TCP was not necessary and tried using a different transfer protocol like UDP, we could not ensure valid data. This may cause the data displayed on our website to be unreliable or even corrupted. The cause of this is that the UDP protocol does not have a 3-way handshake to guarantee the data being transmitted correct and received. Our application could work with UDP, but we could not ensure that the graph or the data we present on our sites are correct and viable.

### *Generating Data*

Through out the project, data was needed to be able to represent the electricity usage. Here we looked at several options. One being an electricity plug where one could get the electricity used by the device which was plugged in. This would be a good option, but the plugs found already had an app which returned this information. We ended up with generating data. This way we could make data which represent electricity usage from a whole house. 
To get data which we can use to represent the electricity usage, we created a class which returns the generated data. The data which we retrieve from the generator is the current time, date, and electricity usage. The data is based on the electricity usage of an average household, and to make the generated data as realistic a possible, the data returned is based on the current time of the day. We could see from different charts, that from 00:00 to 10:00 the levels stayed almost the same, with little to no change. From 10:00 to 14:00 the levels went noticeably up, and when adding a range, the output data would be realistic. From 14:00 to 18:00 we saw that the numbers stayed almost the same, but the real change came around 18:00 to 00:00. Here the electricity usage spiked, but due to it having variations of usage, a range was added to make it realistic. 

![Electricity usage inn homes](electricityUsage.png)<sub> 1. Researchgate</sub>

## **Methodology**

Our workflow has consisted mainly of working together as a group and assigning tasks for each other that must be completed before next meeting. We did some testing with raspberry PI and temperature sensor, but did not implement this in the application since we focused on energy usage. With a kwh sensor it could implement real life data, but the data is currently generated by code. Spot price is also code generated, and is currently based on an average for postal code 6009 Ålesund. The data is then sent to a client every hour using TCP to provide reliability. The client then connects to the database and inserts it into the database with all the necessary values.  

## **Result**

Our data is transmitted from a simple java backend to a central database. This database is hosted on a server which our website retrieves information from. The data in the database is sent by our java backend. The backend is made up of 3 classes, a generator, which generate data to mimic a sensor, a client, which operates as a bridge for the data to be transferred, a client/server, which have a shared responsibility both as a server receiving the data from the sensor and client and as a client that’s forward the data to the database.

## **Discussion**



## **Conclusion and Future Work**



## **Referances**

1. [Researchgate](https://www.researchgate.net/figure/Example-of-power-consumption-of-a-household-over-a-24-hour-period-measured-in-kW_fig3_235644349), picture visualizing the the consetp used in generator class. (03.12.2022, Researchgate)